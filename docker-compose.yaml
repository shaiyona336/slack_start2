version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: slack-clone-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-slack_clone}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - slack-network

  # Backend Flask-SocketIO API
  backend:
    build: ./backend
    container_name: slack-clone-backend
    environment:
      - FLASK_DEBUG=${FLASK_DEBUG:-false}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres/${POSTGRES_DB:-slack_clone}
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-me-in-production}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - slack-network

  # Frontend React App
  frontend:
    build: ./frontend
    container_name: slack-clone-frontend
    environment:
      # Using localhost since the frontend is served to the host browser
      - REACT_APP_API_URL=http://localhost:5000/api
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - slack-network

networks:
  slack-network:
    driver: bridge

volumes:
  postgres_data: